# 리스트 사용 법
# 리스트 [] 는 서랍장이라 생각하자.
odd = [1, 3, 5, 7, 9]
print(type(odd))
# <class 'list'>


print('=' * 15)


a = [1, 2, 3]
print(a[0]) # a 리스트의 인덱싱 0의 자리 '1' 값을 프린트 한다.
# 1


print('=' * 15)


# 연산 가능
print(a[0] + a[2]) # 1 + 3
# 4


print('★' * 100)


# ★★ 리스트 내 리스트도 가능 
a = [1, 2, 3, ['a', 'b', 'c']]
print(a[3][0]) # 인덱싱 3의 자리는 ['a', 'b', 'c'] 리스트가 있다. 그러므로 그 리스트 내 [0] 자리에 있는 값을 프린트 한다. or a[-1][0] 도 가능
# a


print('=' * 15)


a = [1, "hello", 3, ['a', 'b', 'c']] # 해당 리스트에서
print(a[1][2]) # 해당 코드는 인덱싱 [1] 자리 'hello' 에서 인덱싱 [2] 자리에 있는 'l' 값을 프린트 하는 코드 이다
# l


print('=' * 15)


# 삼중 리스트

a = [1, 2, 3, ['a', 'b', 'c',['가', '나', '다']]]
# 해당 리스트에서 '나' 값을 빼내려면
print(a[3][3][1])
# 나

print('★' * 100)


# 리스트의 슬라이싱
a = [1, 2, 3, 4, 5]
print(a[:2]) # 인덱싱 자리 0 부터 1자리 까지 프린트 하는 코딩.
# [1, 2]

print('=' * 10)

print(a[:3:2]) # 인덱싱 자리 0 부터 2 까지 2칸 간격으로 프린트 하는 코딩. 1 , 띄고 , 3 , 띄고 , 5 이런식
# [1,3]


print('=' * 20)


# 리스트 슬라이싱 응용
a = [1, 2, 3, ['a', 'b' 'c'], 4, 5]
print(a[2:5])
# [3, ['a', 'b', 'c'], 4]

print('=' * 10)

print(a[3][:2])
# ['a', 'b']


print('=' * 30)


# 리스트 연산하기
# 리스트 더하기
a = [1, 2, 3]
b = [4, 5, 6]
print(a + b) # a 리스트 와 b 리스트를 이어준다.
# [1, 2, 3, 4, 5, 6]


print('=' * 10)


# 라스트 곱하기
a = [1, 2, 3]
b = 3
print(a * b) # a * 3
# [1, 2, 3, 1, 2, 3, 1, 2, 3]


print('=' * 10)


# 리스트 길이 값
# 까먹었던 문법 >>  len(길이 구할 것)
a = [1, 2, 3, 4]
print(len(a)) # a 리스트 길이 구하는 코드
# 4


print('=' * 10)


# 리스트 내 정수 들을 문자열과 붙이고 싶으면
a = [1, 2, 3, 4, 5]
print(str(a[2]) + "hi") # 리스트 내에 있는 값들은 int 값 즉 정수이기 때문에 str 형태인 "hi" 와 붙지를 않음 그러므로 str로 변환하여 붙여주면 됨
# str 은 정수/실수를 문자열로 바꾸어주는 내장 함수이다.
# 3hi


print('=' * 30)


# 리스트 값 수정하기
a = [1, 2, 3]
a[2] = 4 # a 리스트 인덱싱 2의 자리에 있는 값을 '4' 로 변경하겠다
print(a)
# [1, 2, 4]


print('=' * 30)


# del 함수를 이용해 리스트 요소 삭제하게
# 문법 : del x[삭제값인덱싱자리]
a = [1, 2, 3, 4, 5, 6]
del a[0] # a[0] 값을 삭제하겠다.
print(a)
# [2, 3, 4, 5, 6]

print("=" * 10)

# del 함수 슬라이싱 응용
a = [1, 2, 3, 4, 5]
del a[:2] # 슬라이싱을 활용하여 a리스트 처음부터 a[1] 까지 값을 지우는 코드드
print(a)
# [3, 4, 5]


print("=" * 20)


# 두 개의 리스트에서 값 뽑아서 더하기
a = [1, 2, 3]
b = [4, 5, 6]
print(a[0] + b[1]) # a리스트 [0] 값 + b리스트 [1] 값 >>>> 1 + 5
# 6


print("=" * 20)


# 리스트 매소드

# 리스트에 요소 추가하기 - append
# 문법 : x.append('추가 할 요소')
a = [1, 2, 3]
a.append(4) # a 리스트 내 정수 '4' 추가 코드
print(a)
# [1, 2, 3, 4]

print("=" * 10)

# 리스트에 리스트도 가능
a = [1, 2, 3]
a.append([4, 5]) # a 리스트에 [4, 5] 리스트 추가 코드
print(a)
# [1, 2, 3, [4, 5]]


print("=" * 20)


# 리스트 내 순서 정렬하기 - sort
# 문법 : x.sort()

a = [1, 4, 2, 3]
a.sort() # a리스트의 순서를 정렬하는 코드
print(a)
# [1, 2, 3, 4]

print("=" *10)

a = ['b', 'c', 'a']
a.sort()
print(a)
# ['a', 'b', 'c']


print('=' * 20)


# 거꾸로 정렬하기 - reverse
# 문법 : x.reverse()
a = ['b', 'c', 'a']
a.reverse()
print(a)
# ['a', 'c', 'b']

print('=' *10)

a.sort(), a.reverse() # a 리스트를 순서대로 정렬한 후 reverse를 시키면
print(a)
#['c', 'b', 'a'] 순서대로 반대로 뒤집힌다.


print('=' * 20)


# 인덱스 반환 - index
# 문법 : a.index(인덱싱 위치를 반환할 값값)
a = [1, 2, 3, 4]
print(a.index(2))
# 1 '2' 의 위치는 a[1]

print('=' * 10)

print(a.index(1))
# 0 '1'의 위치는 a[0]


print('=' * 20)


# 리스트에 요소 삽입 - insert
# 문법 : x.insert(몇 번째 인덱스, 추가할 값)
a = [1, 2, 3]
a.insert(0, 4) # a[0] 자리에 '4' 정수 값을 추가하는 코드드
print(a)
# [4, 1, 2, 3]


print('=' * 20)


# 리스트 요소 제거 - remove
# 문법 : x.remove(제거할 값)
a = [1, 2, 3, 1, 2, 3]
a.remove(3) # a 리스트 내 '3' 정수 값을 지운다.
print(a)
# [1, 2, 1, 2, 3] 리스트 에서 첫 번째로 나오는 정수 '3' 값을 삭제 함


print('=' * 20)


# ★ 리스트 요소 끄집어내기 - pop
# 문법 : x.pop(인덱스 위치)
a = [1, 2, 3]
print(a.pop()) # 맨 끝에 있는 값을 빼버림
# 3
print(a)
# [1, 2]


print('=' * 20)


# ★ 리스트에 포함된 요소 x의 개수 세기 - count
# 문법 : x.count(리스트 내 셀 값)
a = [1, 2, 3, 4, 1, 2, 1, 5]
print(a.count(1)) # a 리스트 내 정수 '1'의 개수를 구하는 코드
# 3


# 리스트 확장 - extend
# 문법 : x.extend(확장할 값)
a = [1, 2, 3, 4]
a.extend([5, 6, 7, 8])
print(a)

print('=' * 10)

# 리스트 요소 추가 append 랑 차이 점
a.append(['a', 'b']) # 확장형인 extend 와 달리 append 는 리스트 내 리스트를 추가한다.
print(a)